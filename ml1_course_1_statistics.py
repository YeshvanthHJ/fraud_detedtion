# -*- coding: utf-8 -*-
"""ML1_Course 1:Statistics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18LJvExcsk7k6U-ur6NYFcN72nRrGREO2
"""

import numpy as np
import pandas as pd

censes_data=pd.read_excel('/content/drive/MyDrive/Colab Notebooks/ML/Course 1: Statistics/census+data.xlsx')

censes_data.head()

import pandas as pd
marks = pd.read_csv('https://media-doselect.s3.amazonaws.com/generic/GZVBQG5pzJeNaL1ve50Rv9YNV/class-grades.csv')
print(marks.isnull().sum())

import pandas as pd
marks = pd.read_csv('https://media-doselect.s3.amazonaws.com/generic/VodvGKvJAaeNrG7kvOQV38aog/class-grades.csv')

marks=marks.dropna(thresh=marks.shape[1] - 5 + 1)
marks.dropna()

print(marks.isnull().sum())

import pandas as pd
customer = pd.read_csv('https://media-doselect.s3.amazonaws.com/generic/9B2ZPE1apMvqrLWx7p8ge9dqX/cust_dimen.csv')
customer['Cust_id'] =customer['Cust_id'].str.replace('Cust_','')
print(customer.head(10))

import pandas as pd
rating = pd.read_csv('https://media-doselect.s3.amazonaws.com/generic/JPAqXRWexo7nybkQ7BjPLWVN/rating_final.csv')


rating_update=rating[rating.duplicated(keep='last')==False]
print(rating.shape)
print(rating_update.shape)

import pandas as pd
import numpy as np
from scipy import stats
df=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/ML/Course 1: Statistics/popularity(1).csv')

df[' shares'].describe()

df[' shares'].median()

df[' shares'].quantile(0.78)

print ('70th:-', df[' shares'].quantile(0.70),' 80th:-', df[' shares'].quantile(0.80))

# Removing above 95% Quantiles

df[df[' shares']<=df[' shares'].quantile(0.95)].describe()

filtered_data=df[df[' shares']<=df[' shares'].quantile(0.95)]

datapoints_removed=len(df)-len(filtered_data)

percentage_removed =(datapoints_removed/len(df))*100
print(f'The approximate percentage of data points removed is: {percentage_removed:.2f}%')

#Segmented Analysis

#What percentage of females in the age group 20-24 are illiterate in India, i.e. out of all the females in the age group 20-24, what fraction is illiterate?

import pandas as pd
census=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/ML/Course 1: Statistics/EDA_census_Graded.csv')

Female20_24=census[(census['State Code']==0) & (census['Age Group']=='20-24') & (census['Total/Rural/Urban population']=='Total')]

Female20_24.loc[:,'    Total_Females']

percentage_illiterate=(Female20_24.loc[:,'Illiterate_Females']/Female20_24.loc[:,'    Total_Females'])*100



All_Age=census[(census['State Code']==0) & (census['Age Group']!='All ages') & (census['Total/Rural/Urban population']=='Total')]
Rates_Cal=All_Age[['Age Group','    Total_Persons','Literate_Persons']]

Rates_Cal['literacy rates']=(Rates_Cal['Literate_Persons']/Rates_Cal['    Total_Persons'])*100
Rates_Cal

State_wise=census[(census['State Code'].isin([8,23,30,32])) & (census['Age Group']=='All ages') & (census['Total/Rural/Urban population']=='Total')]
State_wise_Cal=State_wise[['Area Name','    Total_Females','Literate_Females']]

State_wise_Cal['literacy rates']=(State_wise_Cal['Literate_Females']/State_wise_Cal['    Total_Females'])*100
State_wise_Cal



All_State=census[(census['State Code']!=0) & (census['Age Group']=='All ages') & (census['Total/Rural/Urban population']=='Total')]
All_State_Cal=All_State[['Area Name','    Total_Persons','Literate_Persons']]

All_State_Cal['literacy rates']=(All_State_Cal['Literate_Persons']/All_State_Cal['    Total_Persons'])*100
All_State_Cal.sort_values(by=['literacy rates'])

df_GS=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/ML/Course 1: Statistics/EDA_Gold_Silver_prices.csv')







df_GS.corr()

df_GS['Month_Name'] = pd.to_datetime(df_GS['Month'], format='%b-%y').dt.strftime('%B %Y')
df_GS

df_GS

df_GS['Year'] = pd.to_datetime(df_GS['Month'], format='%b-%y').dt.strftime('%Y')

df_GS.Year.unique()



df_2008=df_GS[df_GS.Year=='2008']
df_2008

df_2008.corr()

# Corelation Matrix

import pandas as pd
currencies=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/ML/Course 1: Statistics/currencies.csv')

currencies.head()

import matplotlib.pyplot as plt
plt.matshow(currencies.corr())
plt.show()

currencies.columns

currencies[['Currency','Euro','U.S. Dollar','Australian Dollar','Indian Rupee']].corr()

currencies[['Currency','Euro','U.S. Dollar','Australian Dollar','Indian Rupee','Chinese Yuan','U.K. Pound Sterling','Japanese Yen']].corr()

import pandas as pd
import matplotlib.pyplot as plt

df=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/ML/Course 1: Statistics/nas.csv')

education_group = df.groupby('Mother.edu')['Siblings'].value_counts().unstack(fill_value=0)

# Visualize the distribution using a bar chart
education_group.plot(kind='bar', stacked=True)
plt.xlabel("Mother's Education")
plt.ylabel("Number of Children")
plt.title("Distribution of Number of Siblings by Mother's Education")
plt.legend(title="Number of Siblings")
plt.xticks(rotation=45)
plt.show()

# Find the most common number of siblings among illiterate mothers
most_common_siblings_illiterate = education_group.loc['Illiterate'].idxmax()

print(f"Most children whose mothers are illiterate have: {most_common_siblings_illiterate} siblings")

# Filter out the age group of 11 years
df = df[df['Age'] != 11]


# Group the data by father's education and calculate the average science marks for each group
education_group = df.groupby('Father.edu')['Science..'].mean().reset_index()

# Visualize the average science marks by father's education
plt.figure(figsize=(8, 6))
plt.bar(education_group['Father.edu'], education_group['Science..'])
plt.xlabel("Father's Education Level")
plt.ylabel("Average Science Marks")
plt.title("Average Science Marks by Father's Education Level")
plt.xticks(rotation=45)
plt.show()

# Identify the correct statement based on the analysis
highest_average_education = education_group[education_group['Science..'] == education_group['Science..'].max()]['Father.edu'].iloc[0]

print(f"The correct statement is: Children of fathers with a '{highest_average_education}' education level have the highest average science marks.")

df2=df
df2['Age']=df2.Age.replace('- years','')
df2['Age']=df2.Age.replace(' years','')
df2['Age']=df2.Age.replace('+ years','')
# Filter out the age group of 11 years since there are very few children in that segment
df = df[df['Age'] != 11]

# Group the data by father's education and age, and calculate the average science marks for each group
education_age_group = df.groupby(['Father.edu', 'Age'])['Science..'].mean().reset_index()

# Visualize the average science marks by father's education and age
plt.figure(figsize=(10, 6))
for education_level in education_age_group['Father.edu'].unique():
    education_data = education_age_group[education_age_group['Father.edu'] == education_level]
    plt.plot(education_data['Age'], education_data['Science..'], label=f"Education: {education_level}")

plt.xlabel("Age")
plt.ylabel("Average Science Marks")
plt.title("Average Science Marks by Father's Education Level and Age")
plt.legend()
plt.grid(True)

# Identify the correct statement based on the analysis
average_high_degree = education_age_group[education_age_group['Father.edu'] == 'Degree & above']['Science..'].mean()
average_all_ages = education_age_group['Science..'].mean()

if average_high_degree > average_all_ages:
    print("Children whose fathers have a degree and above perform significantly better than average in science irrespective of the age")
elif (average_high_degree > average_all_ages) and (average_high_degree > education_age_group[(education_age_group['Age'] >= 12) & (education_age_group['Age'] <= 14)]['Science..'].mean()):
    print("Children whose fathers have a degree and above perform significantly better than average for the age groups 12, 13 and 14 years only")
elif (average_high_degree > average_all_ages) and (average_high_degree > education_age_group[(education_age_group['Age'] >= 15) & (education_age_group['Age'] >= 16)]['Science..'].mean()):
    print("Children whose fathers have a degree and above perform significantly better than average for the age groups 15 and 16+ years only")
elif (average_high_degree > average_all_ages) and (average_high_degree > education_age_group[(education_age_group['Age'] == 12) & (education_age_group['Age'] == 13)]['Science..'].mean()):
    print("Children whose fathers have a degree and above perform significantly better than average for the age groups 12 and 13 years only")

df2=df
df2['Age']=df2.Age.str.replace('- years','')
df2['Age']=df2.Age.str.replace(' years','')
df2['Age']=df2.Age.str.replace('+','')
#df2['Age']=df2['Age'].astype('int',skipna)
df2['Age'] = pd.to_numeric(df2['Age'], errors='coerce', downcast='integer')

# Filter out the age group of 11 years since there are very few children in that segment
df2 = df2[df2['Age'] != 11]

# Group the data by father's education and age, and calculate the average science marks for each group
education_age_group = df2.groupby(['Father.edu', 'Age'])['Science..'].mean().reset_index()

# Visualize the average science marks by father's education and age
plt.figure(figsize=(10, 6))
for education_level in education_age_group['Father.edu'].unique():
    education_data = education_age_group[education_age_group['Father.edu'] == education_level]
    plt.plot(education_data['Age'], education_data['Science..'], label=f"Education: {education_level}")

plt.xlabel("Age")
plt.ylabel("Average Science Marks")
plt.title("Average Science Marks by Father's Education Level and Age")
plt.legend()
plt.grid(True)

# Identify the correct statement based on the analysis
average_high_degree = education_age_group[education_age_group['Father.edu'] == 'Degree & above']['Science..'].mean()
average_all_ages = education_age_group['Science..'].mean()

if average_high_degree > average_all_ages:
    print("Children whose fathers have a degree and above perform significantly better than average in science irrespective of the age")
elif (average_high_degree > average_all_ages) and (average_high_degree > education_age_group[(education_age_group['Age'] >= 12) & (education_age_group['Age'] <= 14)]['Science..'].mean()):
    print("Children whose fathers have a degree and above perform significantly better than average for the age groups 12, 13 and 14 years only")
elif (average_high_degree > average_all_ages) and (average_high_degree > education_age_group[(education_age_group['Age'] >= 15) & (education_age_group['Age'] >= 16)]['Science..'].mean()):
    print("Children whose fathers have a degree and above perform significantly better than average for the age groups 15 and 16+ years only")
elif (average_high_degree > average_all_ages) and (average_high_degree > education_age_group[(education_age_group['Age'] == 12) & (education_age_group['Age'] == 13)]['Science..'].mean()):
    print("Children whose fathers have a degree and above perform significantly better than average for the age groups 12 and 13 years only")

df2=df
df2['Age']=df2.Age.str.replace('- years','')
df2['Age']=df2.Age.str.replace(' years','')
df2['Age']=df2.Age.str.replace('+','')
#df2['Age']=df2['Age'].astype('int',skipna)
df2['Age'] = pd.to_numeric(df2['Age'], errors='coerce', downcast='integer')

df2[df2['Age'] == 13]

df2=df
df2[df2['Age'] == '11- years']

import pandas as pd
cust_rating = pd.read_csv('https://media-doselect.s3.amazonaws.com/generic/GvOkzy5MLdy9zJ8vXMArwpRvN/rating_final.csv')

cust_rating['avg_rating'] = round((cust_rating.food_rating+cust_rating.service_rating)/2)

print(cust_rating.head(10))

import pandas as pd
cust_rating = pd.read_csv('https://media-doselect.s3.amazonaws.com/generic/GvOkzy5MLdy9zJ8vXMArwpRvN/rating_final.csv')

cust_rating['avg_rating'] = round(cust_rating[['rating', 'food_rating', 'service_rating']].mean(axis=1))

print(cust_rating.head(10))





import pandas as pd
import datetime
order = pd.read_csv('https://media-doselect.s3.amazonaws.com/generic/0gjkvLLgNdQLqG10jo5yyJyjK/orders_dimen.csv')
order['Order_Date'] = pd.to_datetime(order['Order_Date'])

order['day'] = order['Order_Date'].dt.day

print(order.head(10))



import pandas as pd
import datetime
import os
df=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/ML/Course 1: Statistics/grades.csv')

df['submit_time']=pd.to_datetime(df['submit_time'])
df['day']=df['submit_time'].dt.day

df['month']=df['submit_time'].dt.month
df['year']=df['submit_time'].dt.year



file_ext=df['submission'].apply(lambda x: os.path.split(x)[1])
df['file_format']=file_ext.str.split('.').str[-1]
df



(len(df[df.file_format=='zip'])/len(df))*100

df['file_format'].value_counts()

len(df[df['submit_time']>='2017-01-04 00:00:00'])

df['Date']=df['submit_time'].dt.date

df['Date'].value_counts()

df['Hour']=df['submit_time'].dt.hour
df['Hour'].value_counts()

import matplotlib.pyplot as plt
submission_counts = df['Hour'].value_counts().sort_index()

# Create a bar plot to visualize the distribution
plt.bar(submission_counts.index, submission_counts.values)

# Set labels and title for the plot
plt.xlabel('Hour of the Day')
plt.ylabel('Number of Submissions')
plt.title('Distribution of Submissions by Hour')

# Add labels for the x-axis (hours)
plt.xticks(range(24))

# Show the plot
plt.show()

